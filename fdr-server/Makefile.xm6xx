

CROSS	= arm-xm-linux-
CC	= @echo " GCC	$@"; $(CROSS)gcc
CPP	= @echo " G++	$@"; $(CROSS)g++ -std=c++11
LD	= @echo " LD	$@"; $(CROSS)ld
AR	= @echo " AR	$@"; $(CROSS)ar
STRIP = @echo " STRIP	$@"; $(CROSS)strip
RM	= @echo " RM	"; rm -f

ARCH = armv7a


# -I./fdrsdk -I$(LVGL) -I$(LVGL)/lvgl


TOPDIR := `pwd`

INSTALL = $(TOPDIR)/install
PKGTOOL_PATH = $(TOPDIR)/xm6xx-tools
PKGTOOL_NAME = xm6xx_pkg.sh

REL_LIB_PATH = $(TOPDIR)/libs
ISP_LIB_PATH = $(TOPDIR)/libs/isp
AI_LIB_PATH = $(TOPDIR)/libs/IA
THIRD_LIB_PATH = $(TOPDIR)/libs/third-party
INC_PATH = $(TOPDIR)/include


MPI_LIBS += $(REL_LIB_PATH)/*.a
MPI_LIBS += $(ISP_LIB_PATH)/*.a
MPI_LIBS += $(AI_LIB_PATH)/libxmia.a
MPI_LIBS += $(AI_LIB_PATH)/libfdr.a
MPI_LIBS += $(AI_LIB_PATH)/libfr.a
MPI_LIBS += $(AI_LIB_PATH)/libfacnn.a
MPI_LIBS += $(AI_LIB_PATH)/libfpcnn.a
MPI_LIBS += $(AI_LIB_PATH)/libstf.a
MPI_LIBS += $(AI_LIB_PATH)/libxmia_fd_cnn.a
MPI_LIBS += $(AI_LIB_PATH)/libxmia_comm.a
THIRD_PARTY_LIBS += $(THIRD_LIB_PATH)/*.a


INCLUDE += -I.
INCLUDE += -I$(INC_PATH)
INCLUDE += -I$(INC_PATH)/bashi
INCLUDE += -I$(INC_PATH)/mpp
INCLUDE += -I$(INC_PATH)/smart
INCLUDE += -I$(INC_PATH)/smart/ia
INCLUDE += -I$(INC_PATH)/third-party
INCLUDE += -I$(INC_PATH)/third-party/ZXing
INCLUDE += -I$(INC_PATH)/third-party/event
INCLUDE += -I./thirdparts/misc

vpath 	%.h 	include thirdparts/misc
vpath 	%.c 	src thirdparts/misc
vpath 	%.o 	objs

LIBS = -L./libs  -L./libs/isp -ldl -lm -lpthread -lstdc++ -ljson
LDFLAGS = $(LIBS) -Xlinker "-(" $(MPI_LIBS) $(THIRD_PARTY_LIBS) -Xlinker "-)"
CFLAGS += -DXM6XX
CFLAGS += -DXM630
CFLAGS += -DUI_LANG=0
CFLAGS += -g -O2 -Wall $(INCLUDE) -mcpu=cortex-a5 -mfloat-abi=softfp -mfpu=neon-vfpv4 -mno-unaligned-access -fno-aggressive-loop-optimizations -flax-vector-conversions -fsigned-char -fopenmp
CFLAGS += -D_GNU_SOURCE -D__USE_XOPEN
common-objs =  				\
		logger.o			\
		sqlite3.o 			\
		cJSON.o				\
		base58.o 			\
		sha256.o            \
		lodepng.o 			\
		ecc.o

base-objs =					\
		fdr.o   			\
		fdr-util.o

gui-objs =					\
		lv_gc.o				\
		fdr-gui-decoder.o   \
		fdr-gui.o			


db-objs =					\
		fdr-logger.o 		\
		fdr-dbs-guest.o 	\
		fdr-dbs-config.o 	\
		fdr-dbs-user.o 		\
		fdr-dbs-feature.o	\
		fdr-dbs.o


dp-objs =					\
		bisp-xm6xx.o 
	
cp-objs = 					\
		fdr-qrcode.o 		\
		fdr-cp-xmui.o     	\
		fdr-cp.o 

mp-objs = 					\
		fdr-handler.o		\
		fdr-handler-user.o	\
		fdr-handler-logger.o \
		fdr-mp.o 			\
		fdr-mp-local.o		\
		fdr-mp-cloud.o		\
		fdr-discover.o 		\
		fdr-network.o 		\
		fdr-version.o

test-dbs = bisp-amd64.o  fdr-test.o fdr-dbs-test.o 

test-handler = 					\
		bisp-amd64.o 			\
		fdr-test.o    			\
		fdr-util.o				\
		fdr-handler.o 			\
		fdr-handler-user.o 		\
		fdr-handler-logger.o 	\
		fdr-handler-test.o 

test-cp = 						\
		bisp-amd64.o 			\
		fdr-test.o    			\
		fdr-util.o				\
		fdr-handler.o 			\
		fdr-handler-user.o 		\
		fdr-handler-logger.o 	\
		fdr-cp.o 				\
		fdr-cp-xmui.o 			\
		fdr-qrcode.o         	\
		fdr-cp-test.o

test-mp = 						\
		bisp-amd64.o 			\
		fdr.o    				\
		fdr-util.o				\
		fdr-handler.o 			\
		fdr-handler-user.o 		\
		fdr-handler-logger.o 	\
		fdr-discover.o    		\
		fdr-mp.o 				\
		fdr-mp-cloud.o 			\
		fdr-mp-local.o			\
		fdr-mp-test.o

main-objs = main.o

fdr-objs = $(common-objs) $(base-objs) $(db-objs)  $(dp-objs)  $(cp-objs) $(mp-objs) 

TARGET = fdrserver

%.o : %.c
	$(CC) $(CFLAGS) -c -o objs/$@  $<

$(TARGET) : $(fdr-objs) $(main-objs)
	$(CC) $(CFLAGS) -o $(TARGET)  $(addprefix objs/, $(fdr-objs) $(main-objs)) $(LDFLAGS)
	$(STRIP) $(TARGET)
	mv $(TARGET) $(INSTALL)/
	$(PKGTOOL_PATH)/$(PKGTOOL_NAME)
	
all: $(TARGET)

upgrade:
	$(PKGTOOL_PATH)/$(PKGTOOL_NAME)
	
	
clean-all:
	$(RM) $(addprefix objs/, $(fdr-objs) $(main-objs)) install/$(TARGET)

debug:
	@echo $(THIRD_PARTY_LIBS)

clean:
	$(RM) $(addprefix objs/, $(base-objs) $(db-objs) $(gui-objs) $(dp-objs)  $(cp-objs) $(mp-objs) $(main-objs))  install/$(TARGET)

